package model

import (
	"Etpmls-Admin1-Server/database"
	"errors"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"image"
	_ "image/gif"
	_ "image/jpeg"
	_ "image/png"
	"mime/multipart"
	"os"
	"strings"
	"time"
)

func AttachmentImageUploadV1(c *gin.Context, file *multipart.FileHeader, extension string) (p string, err error) {
	// Make Dir
	t := time.Now().Format("20060102")
	path := "storage/upload/" + t + "/"
	err = os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return p, err
	}
	// UUID File name
	u := strings.ReplaceAll(uuid.New().String(), "-", "")

	file_path := path + u + "." + extension
	err = c.SaveUploadedFile(file, file_path)
	if err != nil {
		return p, errors.New("保存文件失败！")
	}

	if err = database.DB.Create(&Attachment{Path: file_path}).Error; err != nil {
		return p, err
	}

	return file_path, err
}

func AttachmentImageDeleteV1(j JsonAttachmentImageDeleteV1) (err error) {
	err = os.Remove(j.Path)
	if err != nil {
		return err
	}

	// Delete Database
	if err = database.DB.Unscoped().Where("path = ?", j.Path).Delete(Attachment{}).Error; err != nil {
		return err
	}

	return err
}

func AttachmentBatchDeleteV1(s []string) (err error) {
	for _, v := range s {
		// Validate If a File
		err = AttachmentValidatePathV1(v)
		if err != nil {
			return err
		}
		// Delete Image
		err = os.Remove(v)
		if err != nil {
			return err
		}
	}

	// Delete Database
	if err = database.DB.Unscoped().Where("path IN (?)", s).Delete(Attachment{}).Error; err != nil {
		return err
	}

	return err
}

// Validate if file is a image
func AttachmentValidateImageV1(h *multipart.FileHeader) (s string, err error) {
	f, err := h.Open()
	if err != nil {
		return s, err
	}

	// 识别图片类型
	_, image_type, _ := image.Decode(f)

	// 获取图片的类型
	switch image_type {
	case `jpeg`:
		return "jpeg", nil
	case `png`:
		return "png", nil
	case `gif`:
		return "git", nil
	case `bmp`:
		return "bmp", nil
	default:
		err := errors.New("This is not an image file, or the image file format is not supported!")
		return "", err
	}
}
// Validate Path is a file in storage/upload
func AttachmentValidatePathV1(path string) error {
	const upload_path = "storage/upload/"
	// 截取前十五个字符判断和Path是否相同
	if len(path) <= len(upload_path) || !strings.Contains(path[:len(upload_path)], upload_path) {
		return  errors.New("请求路径非法！")
	}
	// 删除前缀
	// p := strings.TrimPrefix(path, upload_path)
	f, err := os.Stat(path)
	if err != nil {
		return err
	}
	// 如果文件是目录
	if f.IsDir() {
		return errors.New("无法删除目录！")
	}
	return nil
}