package model

import (
	"Etpmls-Admin1-Server/database"
	"errors"
	"github.com/dchest/captcha"
	"golang.org/x/crypto/bcrypt"
)

func UserRegisterV1(j JsonUserRegisterV1) (id uint, err error) {
	var form User
	form.Username = j.Username
	form.Password = j.Password
	form.Roles = j.Roles

	// Password bcrypt
	form.Password, err = BcryptPasswordV1(form.Password)
	if err != nil {
		return id, err
	}

	if err = database.DB.Create(&form).Error; err != nil {
		return id, err
	}

	return form.ID, err
}

func UserLoginV1(j JsonUserLoginV1) (id uint, err error) {
	// Validate Captcha
	if !captcha.VerifyString(j.CaptchaId, j.Captcha){
		return id, errors.New("验证码错误！")
	}

	//Search User
	var user User
	database.DB.Where("username = ?", j.Username).First(&user)
	if !(user.ID > 0) {
		return id, errors.New("校验失败或密码错误！")
	}

	//Password is wrong
	b, err := VerifyPasswordV1(j.Password, user.Password)
	if err != nil || !b {
		return id, errors.New("校验失败或密码错误！")
	}

	return user.ID, err
}

func UserGetAllV1() []JsonUserGetAllV1 {
	type User JsonUserGetAllV1
	var users []User
	database.DB.Preload("Roles").Find(&users)

	// []User change to []JsonUserGetAllV1
	var u []JsonUserGetAllV1
	for _, v := range users {
		u = append(u, JsonUserGetAllV1(v))
	}

	return u
}

func UserCreateV1(j JsonUserCreateV1) (id uint, err error) {
	var form User
	form.Username = j.Username
	// Bcrypt Password
	form.Password, err = BcryptPasswordV1(j.Password)
	if err != nil {
		return id, errors.New("密码加密失败！")
	}
	// Association Role
	var roles []Role
	for _, v := range j.Roles {
		roles = append(roles, Role{ID: v.ID})
	}

	//Create User
	if err := database.DB.Create(&form).Association("Roles").Replace(roles).Error; err != nil {
		return id, err
	}

	return form.ID, err
}

func UserEditV1(j JsonUserEditV1) (id uint, err error) {
	var form User
	database.DB.First(&form, j.ID)
	form.Username = j.Username
	// If user set new password
	if len(j.Password) != 0 {
		form.Password = j.Password
	}
	// Get Association Role
	var roles []Role
	for _, v := range j.Roles {
		roles = append(roles, Role{ID: v.ID})
	}

	if err := database.DB.Save(&form).Association("Roles").Replace(roles).Error; err != nil {
		return id, err
	}

	return form.ID, err
}

func UserDeleteV1(u UriUserDeleteV1) (err error) {
	// Delete User & User-Role
	if err = database.DB.Unscoped().Delete(&User{ID: u.ID}).Association("Roles").Clear().Error; err != nil {
		return err
	}

	return err
}

func BcryptPasswordV1(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	return string(bytes), err
}

func VerifyPasswordV1(password, hash string) (bool, error) {
	err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))
	if err != nil {
		return false, err
	}
	return true, err
}

