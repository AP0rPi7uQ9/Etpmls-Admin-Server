package model

import (
	"errors"
	"fmt"
	"time"
)

type TimeToSecond struct {
	time.Time
}

// Package Time MarshalJSON method
func (t TimeToSecond) MarshalJSON() ([]byte, error) {
	if y := t.Year(); y < 0 || y >= 10000 {
		// RFC 3339 is clear that years are 4 digits exactly.
		// See golang.org/issue/4556#c15 for more discussion.
		return nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")
	}

	b := make([]byte, 0, len("2006-01-02 15:04:05")+2)
	b = append(b, '"')
	b = t.AppendFormat(b, "2006-01-02 15:04:05")
	b = append(b, '"')
	return b, nil
}

// Package Gorm Scan method
func (t *TimeToSecond) Scan(v interface{}) error {
	value, ok := v.(time.Time)
	if ok {
		*t = TimeToSecond{Time: value}
		return nil
	}
	return fmt.Errorf("can not convert %v to timestamp", v)
}


type TimeToDay struct {
	time.Time
}

// Package Time MarshalJSON method
func (t TimeToDay) MarshalJSON() ([]byte, error) {
	if y := t.Year(); y < 0 || y >= 10000 {
		// RFC 3339 is clear that years are 4 digits exactly.
		// See golang.org/issue/4556#c15 for more discussion.
		return nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")
	}

	b := make([]byte, 0, len("2006-01-02")+2)
	b = append(b, '"')
	b = t.AppendFormat(b, "2006-01-02")
	b = append(b, '"')
	return b, nil
}

// Package Gorm Scan method
func (t *TimeToDay) Scan(v interface{}) error {
	value, ok := v.(time.Time)
	if ok {
		*t = TimeToDay{Time: value}
		return nil
	}
	return fmt.Errorf("can not convert %v to timestamp", v)
}